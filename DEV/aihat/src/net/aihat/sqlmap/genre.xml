<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="genre">
	<sql id="genreCommonSelect">
		SELECT
			g.id as id,
			g.name_vi as nameVi,
			g.name_en as nameEn,
			g.created_time as createdTime,
			g.modified_time as modifiedTime,
			g.user_id as `user.id`,
			u.mail as `user.mail`,
			g.deleted as deleted,
			g.name_vi_search as nameViSearch,
			g.name_en_search as nameEnSearch,
			(
				SELECT count(*)
				FROM clip_genre cg_, clip c_
				WHERE cg_.genre_id = g.id AND cg_.clip_id = c_.id AND NOT c_.deleted
			) as nClips
	</sql>
	<sql id="genreCommonFrom">
		FROM genre g, user u
	</sql>
	<sql id="genreCommonWhere">
		WHERE
			NOT g.deleted AND
			g.user_id = u.id
	</sql>
	<sql id="genreCommonSearchConditions">
		<dynamic>
			<isNotNull property="id" prepend="AND">
				g.id = #id#
			</isNotNull>
			<isEqual property="language" compareValue="en" prepend="AND">
				g.name_en_search like #name#
			</isEqual>
			<isEqual property="language" compareValue="vi" prepend="AND">
				g.name_vi_search like #name#
			</isEqual>
			<isNull property="language" prepend="AND">
				(
					g.name_en_search like #name#
					OR
					g.name_vi_search like #name#
				)
			</isNull>
			<isNotNull property="user.id" prepend="AND">
				g.user_id = #user.id#
			</isNotNull>
			<isNotNull property="user.mail" prepend="AND">
				u.mail = #user.mail#
			</isNotNull>
			<isNotEmpty property="ids" prepend="AND">
				g.id in
				<iterate open="(" close=")" conjunction=",">
					#ids[]#
				</iterate>
			</isNotEmpty>
		</dynamic>
		<include refid="commonSorting"/>
		<include refid="commonPaging"/>
	</sql>
	<select id="getAllSimpleGenres" parameterClass="string" resultClass="net.aihat.dto.GenreDto">
		SELECT g.id as id, g.name_vi as nameVi, g.name_en as nameEn
		FROM genre g
		WHERE NOT g.deleted
		<dynamic prepend="ORDER BY">
			<isEqual compareValue="vi">
				nameVi asc
			</isEqual>
			<isEqual compareValue="en">
				nameEn asc
			</isEqual>
			<isNull>
				nameVi asc
			</isNull>
		</dynamic>
	</select>
	<select id="getGenre" parameterClass="integer" resultClass="net.aihat.dto.GenreDto">
		<include refid="genreCommonSelect"/>
		<include refid="genreCommonFrom"/>
		<include refid="genreCommonWhere"/>
			AND g.id = #id#
	</select>
	<select id="getGenreByName" parameterClass="map" resultClass="net.aihat.dto.GenreDto">
		SELECT g.id as id
		FROM genre g
		WHERE
			NOT g.deleted
			<dynamic prepend="AND">
				<isEqual property="language" compareValue="vi">
					g.name_vi = #name#
				</isEqual>
				<isEqual property="language" compareValue="en">
					g.name_en = #name#
				</isEqual>
				<isNull property="language">
					g.name_vi = #name#
				</isNull>
			</dynamic>
		LIMIT 1
	</select>
	<select id="searchGenre" parameterClass="net.aihat.criteria.GenreSearchCriteria" resultClass="net.aihat.dto.GenreDto">
		<include refid="genreCommonSelect"/>
		<include refid="genreCommonFrom"/>
		<include refid="genreCommonWhere"/>
		<include refid="genreCommonSearchConditions"/>
	</select>
	<select id="countGenre" parameterClass="net.aihat.criteria.GenreSearchCriteria" resultClass="long">
		SELECT count(*)
		<include refid="genreCommonFrom"/>
		<include refid="genreCommonWhere"/>
		<include refid="genreCommonSearchConditions"/>
	</select>
	<insert id="insertGenre" parameterClass="net.aihat.dto.GenreDto">
		INSERT INTO genre(name_vi, name_en, created_time, modified_time, user_id, name_vi_search, name_en_search)
		VALUES(#nameVi#, #nameEn#, NOW(), NOW(), #user.id#, #nameViSearch#, #nameEnSearch#)
	</insert>
	<update id="updateGenreDeleted" parameterClass="list">
		UPDATE genre
		SET deleted = 1
		WHERE id in
		<iterate open="(" close=")" conjunction=",">
			#ids[]#
		</iterate>
	</update>
	<update id="updateGenre" parameterClass="net.aihat.dto.GenreDto">
		UPDATE genre
		SET
			name_vi = #nameVi#,
			name_en = #nameEn#,
			modified_time = NOW(),
			name_vi_search = #nameViSearch#,
			name_en_search = #nameEnSearch#
		WHERE
			id = #id#
	</update>
</sqlMap>