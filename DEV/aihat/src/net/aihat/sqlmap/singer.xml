<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="singer">
	<sql id="singerCommonSelect">
		SELECT
			s.id as id,
  			s.name as name,
			s.created_time as createdTime,
			s.modified_time as modifiedTime,
			s.deleted as deleted,
			s.user_id as `user.id`,
			u.mail as `user.mail`,
			s.birthday as birthday,
			s.company as company,
			s.website as website,
			s.image as image,
			s.description as description,
			s.name_search as nameSearch,
			s.country as country,
			(
				SELECT count(*)
				FROM clip_singer cs_, clip c_
				WHERE cs_.singer_id = s.id AND cs_.clip_id = c_.id AND NOT c_.deleted
			) as nClips,
			(SELECT count(*) FROM user_like_singer uls_ WHERE uls_.singer_id = s.id) as nFans,
			(SELECT count(*) FROM user_follow_singer ufs_ WHERE ufs_.singer_id = s.id) as nFollowers,
			(
				SELECT count(*)
				FROM user_view_clip uvc_
				WHERE
					EXISTS (
						SELECT *
						FROM clip_singer cs_
						WHERE
							cs_.clip_id = uvc_id AND
							cs_.singer_id = s.id
					)
			) as nViews
			
			
	</sql>
	<sql id="singerCommonFrom">
		FROM singer s, user u
	</sql>
	<sql id="singerCommonWhere">
		WHERE
			NOT s.deleted AND
			s.user_id = u.id
	</sql>
	<sql id="singerCommonSearchConditions">
		<dynamic>
			<isNotNull prepend="AND" property="id">
				s.id = #id#
			</isNotNull>
			<isNotNull prepend="AND" property="name">
				s.name_search like #name#
			</isNotNull>
			<isNotNull prepend="AND" property="user.id">
				s.user_id = #user.id#
			</isNotNull>
			<isNotNull prepend="AND" property="user.mail">
				u.mail = #user.mail#
			</isNotNull>
			<isNotNull prepend="AND" property="followedBy">
				EXISTS (
					SELECT *
					FROM user_follow_singer _ufs
					WHERE _ufs.singer_id = s.id AND _ufs.user_id = #followedBy#
				)
			</isNotNull>
			<isNotEmpty property="ids" prepend="AND">
				s.id in
				<iterate open="(" close=")" conjunction=",">
					#ids[]#
				</iterate>
			</isNotEmpty>
		</dynamic>
		<include refid="commonSorting"/>
		<include refid="commonPaging"/>
	</sql>
	<select id="getAllSimpleSingers" resultClass="net.aihat.dto.SingerDto">
		SELECT s.id as id, s.name as name
		FROM singer s
		WHERE NOT s.deleted
		ORDER BY s.name asc
	</select>
	
	<select id="getSinger" parameterClass="integer" resultClass="net.aihat.dto.SingerDto">
		<include refid="singerCommonSelect"/>
		<include refid="singerCommonFrom"/>
		<include refid="singerCommonWhere"/>
			AND s.id = #id#
	</select>
	<select id="getSingerByName" parameterClass="string" resultClass="net.aihat.dto.SingerDto">
		SELECT s.id as id
		FROM singer s
		WHERE NOT s.deleted AND s.name = #name#
		LIMIT 1
	</select>
	<select id="searchSinger" parameterClass="net.aihat.criteria.SingerSearchCriteria" resultClass="net.aihat.dto.SingerDto">
		<include refid="singerCommonSelect"/>
		<include refid="singerCommonFrom"/>
		<include refid="singerCommonWhere"/>
		<include refid="singerCommonSearchConditions"/>			
	</select>
	<select id="countSinger" parameterClass="net.aihat.criteria.SingerSearchCriteria" resultClass="long">
		SELECT count(*)
		<include refid="singerCommonFrom"/>
		<include refid="singerCommonWhere"/>
		<include refid="singerCommonSearchConditions"/>			
	</select>
	<insert id="insertSinger" parameterClass="net.aihat.dto.SingerDto">
		INSERT INTO singer(name, created_time, modified_time, user_id, birthday, company, website, image, description, name_search, country)
		VALUES(#name#, NOW(), NOW(), #user.id#, #birthday#, #company#, #website#, #image#, #description#, #nameSearch#, #country#)
	</insert>
	<update id="updateSingerDeleted" parameterClass="list">
		UPDATE singer
		SET deleted = 1
		WHERE id in
		<iterate open="(" close=")" conjunction=",">
			#ids[]#
		</iterate>
	</update>
	<update id="updateSingerImage" parameterClass="net.aihat.dto.SingerDto">
		UPDATE singer
		SET
			image = #image#
		WHERE
			id = #id#
	</update>
	<update id="updateSinger" parameterClass="net.aihat.dto.SingerDto">
		UPDATE singer
		SET
			name = #name#,
			modified_time = NOW(),
			birthday = #birthday#,
			company = #company#,
			website = #website#,
			image = #image#,
			description = #description#,
			name_search = #nameSearch#,
			country = #country#
		WHERE
			id = #id#
	</update>
	<insert id="insertUserFollowSinger" parameterClass="map">
		INSERT INTO user_follow_singer(user_id, singer_id, time)
		VALUES(#user.id#, #singer.id#, NOW())
	</insert>
	<delete id="deleteUserFollowSinger" parameterClass="map">
		DELETE FROM user_follow_singer
		WHERE
			user_id = #user.id# AND
			singer_id = #singer.id#
	</delete>
	<select id="checkFollowerForSinger" parameterClass="map" resultClass="long">
		SELECT count(*)
		FROM user_follow_singer
		WHERE
			user_id = #user.id# AND
			singer_id = #singer.id#
	</select>
	<insert id="insertUserLikeSinger" parameterClass="map">
		INSERT INTO user_like_singer(user_id, singer_id)
		VALUES(#user.id#, #singer.id#)
	</insert>
	<delete id="deleteUserLikeSinger" parameterClass="map">
		DELETE FROM user_like_singer
		WHERE
			user_id = #user.id# AND
			singer_id = #singer.id#
	</delete>
	<select id="checkLikedForSinger" parameterClass="map" resultClass="long">
		SELECT count(*)
		FROM user_like_singer
		WHERE
			user_id = #user.id# AND
			singer_id = #singer.id#
	</select>
</sqlMap>