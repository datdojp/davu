<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="playlist">
	<sql id="plCommonSelect">
		SELECT
			pl.id as id,
			pl.name as name,
			pl.created_time as createdTime,
			pl.modified_time as modifiedTime,
			pl.user_id as `user.id`,
			u.mail as `user.mail`,
			u.name as `user.name`,
			pl.name_search as nameSearch,
			pl.deleted as deleted,
			(
				SELECT count(*)
				FROM playlist_clip plc_
				WHERE plc_.playlist_id = pl.id
			) as nClips,
			description as description
	</sql>
	<sql id="plCommonFrom">
		FROM playlist pl, user u
	</sql>
	<sql id="plCommonWhere">
		WHERE
			NOT pl.deleted AND
			pl.user_id = u.id
	</sql>
	<sql id="plCommonSearchConditions">
		<dynamic>
			<isNotNull prepend="AND" property="id">
				pl.id = #id#
			</isNotNull>
			<isNotNull prepend="AND" property="name">
				pl.name_search like #name#
			</isNotNull>
			<isNotNull prepend="AND" property="user.id">
				pl.user_id = #user.id#
			</isNotNull>
			<isNotNull prepend="AND" property="user.mail">
				u.mail = #user.mail#
			</isNotNull>
			<isEmpty property="ids" prepend="AND">
				pl.id in
				<iterate open="(" close=")" conjunction=",">
					#ids[]#
				</iterate>
			</isEmpty>
		</dynamic>
		<include refid="commonSorting"/>
		<include refid="commonPaging"/>
	</sql>
	<select id="getPlaylist" parameterClass="integer" resultClass="net.aihat.dto.PlaylistDto">
		<include refid="plCommonSelect"/>
		<include refid="plCommonFrom"/>
		<include refid="plCommonWhere"/>
			AND pl.id = #id#
	</select>
	<select id="searchPlaylist" parameterClass="net.aihat.criteria.PlaylistSearchCriteria" resultClass="net.aihat.dto.PlaylistDto">
		<include refid="plCommonSelect"/>
		<include refid="plCommonFrom"/>
		<include refid="plCommonWhere"/>
		<include refid="plCommonSearchConditions"/>
	</select>
	<select id="countPlaylist" parameterClass="net.aihat.criteria.PlaylistSearchCriteria" resultClass="long">
		SELECT count(*)
		<include refid="plCommonFrom"/>
		<include refid="plCommonWhere"/>
		<include refid="plCommonSearchConditions"/>
	</select>
	<insert id="insertPlaylist" parameterClass="net.aihat.dto.PlaylistDto">
		INSERT INTO playlist(name, created_time, modified_time, user_id, name_search, description)
		VALUES(#name#, NOW(), NOW(), #user.id#, #nameSearch#, #description#)
	</insert>
	<update id="updatePlaylistDeleted" parameterClass="list">
		UPDATE playlist
		SET deleted = 1
		WHERE id in
		<iterate open="(" close=")" conjunction=",">
			#ids[]#
		</iterate>
	</update>
	<update id="updatePlaylist" parameterClass="net.aihat.dto.PlaylistDto">
		UPDATE playlist
		SET
			name = #name#,
			modified_time = NOW(),
			name_search = #nameSearch#,
			description = #description#
		WHERE
			id = #id#
	</update>
	<insert id="addClipToPlaylist" parameterClass="map">
		INSERT INTO playlist_clip(playlist_id, clip_id, main_clip, `order`)
		VALUES(#playlist.id#, #clip.id#, #isMainClip#, #clip.orderInPlaylist#)
	</insert>
	<delete id="removeClipFromPlaylist" parameterClass="map">
		DELETE FROM playlist_clip
		WHERE playlist_id = #playlist.id# AND clip_id = #clip.id#
	</delete>
	<select id="getMailClipForPlaylist" parameterClass="net.aihat.dto.PlaylistDto" resultClass="net.aihat.dto.ClipDto">
		SELECT
			c.id as id,
			c.link as link
		FROM clip c, playlist_clip pc
		WHERE
			pc.playlist_id = #id# AND
			pc.clip_id = c.id
		ORDER BY pc.main_clip desc
		LIMIT 1
	</select>
	<update id="updateClipOrderInPlaylist" parameterClass="map">
		UPDATE playlist_clip
		SET `order` = #clip.orderInPlaylist#
		WHERE
			playlist_id = #playlist.id# AND
			clip_id = #clip.id#
	</update>
</sqlMap>