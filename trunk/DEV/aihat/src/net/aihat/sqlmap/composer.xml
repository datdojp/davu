<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="composer">
	<sql id="composerCommonSelect">
		SELECT
			com.id as id,
			com.name as name,
			com.deleted as deleted,
			com.created_time as createdTime,
			com.user_id as `user.id`,
			u.mail as `user.mail`,
			com.modified_time as modifiedTime,
			com.birthday as birthday,
			com.country as country,
			com.description as description,
			com.image as image,
			com.name_search as nameSearch,
			(
				SELECT count(*)
				FROM clip_composer clc_, clip c_
				WHERE clc_.composer_id = com.id AND clc_.clip_id = c_.id AND NOT c_.deleted
			) as nClips
	</sql>
	<sql id="composerCommonFrom">
		FROM composer com, user u
	</sql>
	<sql id="composerCommonWhere">
		WHERE
			NOT com.deleted AND
			com.user_id = u.id
	</sql>
	<sql id="composerCommonSearchConditions">
		<dynamic>
			<isNotNull prepend="AND" property="id">
				com.id = #id#
			</isNotNull>
			<isNotNull prepend="AND" property="name">
				com.name_search like #name#
			</isNotNull>
			<isNotNull prepend="AND" property="user.id">
				com.user_id = #user.id#
			</isNotNull>
			<isNotNull prepend="AND" property="user.mail">
				u.mail = #user.mail#
			</isNotNull>
		</dynamic>
		<include refid="commonSorting"/>
		<include refid="commonPaging"/>
	</sql>
	<select id="getAllSimpleComposers" resultClass="net.aihat.dto.ComposerDto">
		SELECT com.id as id, com.name as name
		FROM composer com
		WHERE NOT com.deleted
		ORDER BY com.name asc
	</select>
	<select id="getComposer" parameterClass="integer" resultClass="net.aihat.dto.ComposerDto">
		<include refid="composerCommonSelect"/>
		<include refid="composerCommonFrom"/>
		<include refid="composerCommonWhere"/>
			AND com.id = #id#;
	</select>
	<select id="getComposerByName" parameterClass="string" resultClass="net.aihat.dto.ComposerDto">
		SELECT com.id as id
		FROM composer com
		WHERE NOT com.deleted AND com.name = #name#
		LIMIT 1
	</select>
	<select id="searchComposer" parameterClass="net.aihat.criteria.ComposerSearchCriteria" resultClass="net.aihat.dto.ComposerDto">
		<include refid="composerCommonSelect"/>
		<include refid="composerCommonFrom"/>
		<include refid="composerCommonWhere"/>
		<include refid="composerCommonSearchConditions"/>	
	</select>
	<select id="countComposer" parameterClass="net.aihat.criteria.ComposerSearchCriteria" resultClass="long">
		SELECT count(*)
		<include refid="composerCommonFrom"/>
		<include refid="composerCommonWhere"/>
		<include refid="composerCommonSearchConditions"/>	
	</select>
	<insert id="insertComposer" parameterClass="net.aihat.dto.ComposerDto">
		INSERT INTO composer(name, created_time, user_id, modified_time, birthday, country, description, image, name_search)
		VALUES(#name#, NOW(), #user.id#, NOW(), #birthday#, #country#, #description#, #image#, #nameSearch#)
	</insert>
	<update id="updateComposerDeleted" parameterClass="list">
		UPDATE composer
		SET deleted = 1
		WHERE id in
		<iterate open="(" close=")" conjunction="," property="ids">
			#ids[]#
		</iterate>
	</update>
	<update id="updateComposerImage" parameterClass="net.aihat.dto.ComposerDto">
		UPDATE composer
		SET
			image = #image#
		WHERE
			id = #id#
	</update>
	<update id="updateComposer" parameterClass="net.aihat.dto.ComposerDto">
		UPDATE composer
		SET
			name = #name#,
			modified_time = NOW(),
			birthday = #birthday#,
			country = #country#,
			description = #description#,
			image = #image#,
			name_search = #nameSearch#
		WHERE
			id = #id#
	</update>
</sqlMap>