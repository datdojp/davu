<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="user">
	<sql id="userCommonSelect">
		SELECT
			u.id as id,
			u.mail as mail,
			u.created_time as createdTime,
			u.modified_time as modifiedTime,
			u.deleted as deleted,
			u.blocked as blocked,
			u.password_id as `password.id`,
			p.encrypted as `password.encrypted`,
			u.last_login as lastLogin,
			u.language as language,
			u.admin as admin,
			u.image as image,
			u.name as name,
			u.sex as sex,
			u.birthday as birthday,
			(
				SELECT count(*)
				FROM clip c_
				WHERE c_.user_id = u.id AND NOT c_.deleted
			) as nClips,
			(
				SELECT count(*)
				FROM singer s_
				WHERE s_.user_id = u.id AND NOT s_.deleted
			) as nSingers,
			(
				SELECT count(*)
				FROM composer com_
				WHERE com_.user_id = u.id AND NOT com_.deleted
			) as nComposers,
			(
				SELECT count(*)
				FROM genre g_
				WHERE g_.user_id = u.id AND NOT g_.deleted
			) as nGenres,
			(
				SELECT count(*)
				FROM user_follow_uploader ufu_, user u_
				WHERE
					ufu_.followed = u.id AND
					ufu_.following = u_.id AND
					NOT u_.deleted
			) as nFollowers
	</sql>
	<sql id="userCommonFrom">
		FROM user u, password p
	</sql>
	<sql id="userCommonWhere">
		WHERE
			NOT u.deleted AND
			u.password_id = p.id
	</sql>
	<sql id="userCommonSearchConditions">
		<dynamic>
			<isNotNull property="id" prepend="AND">
				u.id = #id#
			</isNotNull>
			<isNotNull property="mail" prepend="AND">
				u.mail like #mail#
			</isNotNull>
			<isNotNull property="blocked" prepend="AND">
				u.blocked = #blocked#
			</isNotNull>
			<isNotNull property="admin" prepend="AND">
				u.admin = #admin#
			</isNotNull>
			<isNotNull prepend="AND" property="followedBy">
				EXISTS (
					SELECT *
					FROM user_follow_uploader _ufu
					WHERE _ufu.followed = u.id AND _ufu.following = #followedBy#
				)
			</isNotNull>
		</dynamic>
		<include refid="commonSorting"/>
		<include refid="commonPaging"/>
	</sql>
	<select id="getUserById" parameterClass="integer" resultClass="net.aihat.dto.UserDto">
		<include refid="userCommonSelect"/>
		<include refid="userCommonFrom"/>
		<include refid="userCommonWhere"/>
			AND u.id = #id#
	</select>
	<select id="getUserByMail" parameterClass="string" resultClass="net.aihat.dto.UserDto">
		<include refid="userCommonSelect"/>
		<include refid="userCommonFrom"/>
		<include refid="userCommonWhere"/>
			AND u.mail = #mail#
	</select>
	<select id="searchUser" parameterClass="net.aihat.criteria.UserSearchCriteria" resultClass="net.aihat.dto.UserDto">
		<include refid="userCommonSelect"/>
		<include refid="userCommonFrom"/>
		<include refid="userCommonWhere"/>
		<include refid="userCommonSearchConditions"/>
	</select>
	<select id="countUser" parameterClass="net.aihat.criteria.UserSearchCriteria" resultClass="long">
		SELECT count(*)
		<include refid="userCommonFrom"/>
		<include refid="userCommonWhere"/>
		<include refid="userCommonSearchConditions"/>
	</select>
	<update id="updateLastLogin" parameterClass="integer">
		UPDATE user
		SET last_login = NOW()
		WHERE id = #id#
	</update>
	<update id="updateLanguage" parameterClass="map">
		UPDATE user
		SET language = #language#
		WHERE id = #id#
	</update>
	<update id="updateUserDeleted" parameterClass="list">
		UPDATE user
		SET deleted = 1
		WHERE id in
		<iterate open="(" close=")" conjunction=",">
			#ids[]#
		</iterate>
	</update>
	<update id="updateUserBlocked" parameterClass="list">
		UPDATE user
		SET blocked = 1
		WHERE id in
		<iterate open="(" close=")" conjunction=",">
			#ids[]#
		</iterate>
	</update>
	<update id="updateUserUnblocked" parameterClass="list">
		UPDATE user
		SET blocked = 0
		WHERE id in
		<iterate open="(" close=")" conjunction=",">
			#ids[]#
		</iterate>
	</update>
	<update id="updateUserImage" parameterClass="net.aihat.dto.UserDto">
		UPDATE user
		SET
			image = #image#
		WHERE
			id = #id#
	</update>
	<select id="findFollower" parameterClass="int" resultClass="net.aihat.dto.UserDto">
		SELECT
			u.id as id,
			u.mail as mail
		<include refid="userCommonFrom"/>
		<include refid="userCommonWhere"/>
			AND EXISTS (
				SELECT *
				FROM user_follow_uploader _ufu
				WHERE
					_ufu.followed = #userId# AND
					_ufu.following = u.id
			)
	</select>
	<insert id="insertUserFollowUploader" parameterClass="map">
		INSERT INTO user_follow_uploader(following, followed, time)
		VALUES(#following.id#, #followed.id#, NOW())
	</insert>
	<delete id="deleteUserFollowUploader" parameterClass="map">
		DELETE FROM user_follow_uploader
		WHERE
			following = #following.id# AND
			followed = #followed.id#
	</delete>
	<select id="checkFollowerForUploader" parameterClass="map" resultClass="long">
		SELECT count(*)
		FROM user_follow_uploader
		WHERE
			following = #following.id# AND
			followed = #followed.id#
	</select>
	<insert id="insertUser" parameterClass="net.aihat.dto.UserDto">
		INSERT INTO user(mail, password_id, language, admin, image, created_time, modified_time, name, sex, birthday)
		VALUES(#mail#, #password.id#, #language#, #admin#, #image#, NOW(), NOW(), #name#, #sex#, #birthday#)
	</insert>
	<update id="updateUser" parameterClass="net.aihat.dto.UserDto">
		UPDATE user
		SET
			name = #name#,
			sex = #sex#,
			birthday = #birthday#
		WHERE id = #id#
	</update>
</sqlMap>